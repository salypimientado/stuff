#+STARTUP: hidestars

* Construccion de software y toma de decisiones
  
** Web development
*** HTML
    Hyper Text Markup Language

    Tags = 
    Se pone el documento entero en un tag de html

    Tag:
    Contiene informacion y otros tags adentro
    - Deben cerrarse
    <tag> content </tag>
    
**** Head
     Meta tags
     Title
**** Body
     En si el cuerpo de la pagina
     Tags:
    | Tag     | Tipo de elemento|
    |---------+---------------- |
    | <p>     |  Parrafo        |
    | <div>   |  Division       |
    | <span>  |  Span           |
    | <ul>    |  Unordered List |
    | <li>    |  List Item      |
    | <form>  |  Formulario     |
     

     Atributos:
     - id
       Mas que nada para acceder al elemento
     - class
       Para acceder a un grupo de elementos y ponerles css
*** Git
    Sistema de control de versiones
    Se basa en un grafo aciclico dirigido
    
**** Comandos 
     - init: Inicializa un repositorio
     - add <archivo>: Hace que git tome en cuenta el archivo
       * Se puede poner add . para trackear todos los archivos y archivos en carpetas en la carpeta actual
     - commit: Crea un punto en el tiempo con los archivos trackeados
       * Argumentos:
         - -a hace que se haga commit de todos los archivos trackeados que cambiaron
         - -m "mensaje" hace un commit con el mensaje dado
     - fetch: Saca la informacion del repositorio remoto asignado
     - merge: Junta dos branches y los cambios entre ellas
     - pull: Saca la informacion del repositorio remoto y hace merge con la branch actual


     Servicios de hosting de repositorios:
     - Github
     - Bitbucket
       
       
*** CSS
    Permite cambiar los estilos por secciones

    Ejemplo:
    
    - .d1 : {
      bg-color: #FF00FF
      font-size: 15
      }
      
      + Se incluye en el html como referencia de tipo stylesheet o en el mismo
        archivo con el tag <style>
   
****  Bootstrap
     Da una serie de clases de CSS predefinidas que se pueden usar en el html
     que sirven para el formato

     + Se incluye en el html como referencia al inicio y tambien se incluye el
       javascript como script
    
*** Javascript
    Typeless scripting language

    + Las variables no tienen tipo
   #+begin_src js
     let integer = 1290;
     console.log(integer);
     integer = "value";
     console.log(integer);
   #+end_src

   #+RESULTS:
   : 1290
   : value
      
  
**** Variable types 
     #+begin_src js
       //object
       let array = [1,12.30, "string", [1,2,3], {a:"b"}];
       console.log(array);
       //object
       let config_map = {
          int_key: 10,
          string_key: "str",
          kpi_one: {
              display_type: "time_series",
              operation: "grouing_person"
          },
          fun: (arg_one) => {
              console.log(arg_one);
          }
       }
       console.log(config_map);
       config_map.fun("holis");
     #+end_src

     #+RESULTS:
     : [1 (\, 12.3) (\, 'string) '(\, [1 (\, 2) (\, 3)]) (\, {) a: 'b '}]

**** Flow Control
#+begin_src js
if(0) {
  console.log("in the if")
} else if(1) {
  console.log("in the else if")
} else {
  console.log("in the else")
} 
#+end_src


#+begin_src js
switch ("MAYBE") {
  case "YES":
    console.log("yes")
    break
  case "NO":
    console.log("no")
    break
  default:
    console.log("default")
}
#+end_src

#+begin_src js
let i = 0 
while(i < 5){
  console.log(i)
  i++
}

let array = [1,12.30, "strng", [1,2,3], {a:"b"}]
for (let index = 0; index < array.length; index++) {
  const element = array[index];
  console.log(element)
}
#+end_src

#+begin_src js
let array = [1,12.30, "strng", [1,2,3], {a:"b"}]
for (let index in array) {
  console.log(array[index])
}
array.map
array.forEach(element => {
  console.log(element)
});
#+end_src

#+begin_src js
    document.addEventListener("DOMContentLoaded", (_event) => {
      document.querySelector("p#my-p-id").innerHTML = "hola mundo"
      let click_function = (event) => {
        console.log("clicked")
        console.log(event)
        console.log(event.target)
        console.log(event.currentTarget)
      }
      document.querySelector("#my-btn").addEventListener("click", click_function)
      document.querySelector("input.key-event").addEventListener("keyup", click_function)
    })
#+end_src

#+begin_src js

#+end_src
**** Events
Cosas que pasan en una pagina y se pueden conectar con funciones


** Bases de datos
*** Metodogias agiles 
    Forma de implementar proyectos basada en iteraciones minimas funcionales
    con el objetivo de aumentar la colaboracion con el cliente para ofrecer
    lo que se desea de una mejor manera.

    12 principios de agilidad
    1. Aceptamos que los requisitos cambien, incluso en etapas tardias del desarrollo
       Los procesos agiles aprovechan el camio para proporcionar ventaja competitiva
       al cliente

   TODO <<< esto
**** Marco de trabajo o metodos agiles 
     - SCRUM
       * marco de trabajo dentro del cual se pueden atender problemas complejos,
       proponiendo soluciones creativas y productivas con el fin de entregar productos
       del mayor valor posible.

     - Programacion Extrema
       * Participacion del cliente en el equipo de desarrollo hasta llegar a tener
       retroalimentacion del cliente de forma diaria, pruebas sistematicas y los
       programadores trabajan en parejas.

     - Kanban:
       * Un tablero que permite ver de forma rapida las actividades que quedan por hacer,
       en proceso y terminadas.

**** Modelos de desarrollo
***** Cascada
        Tiene fases definidas:
        1. Requerimiento
        2. DiseÃ±o
        3. Desarrollo
        4. Pruebas
        5. Ejecucion y mantenimiento
      
***** Scrum
        Conformado por sprints con las etapas del modelo cascada
        - Definiciones:
        * Evento:        Sesiones de trabajo con un objetivo especifico en la produccion de
                         resultados tangibles de valor
        * Artefactos:    Cualquier subproceso de trabajo de equipo agil, como documentos,
                         procesos, reglas de negocios, software, etc...
        * Valor:         Todo lo que resuelve algun punto de dolor o facilita algun trabajo
                         al cliente
        * Producto:      Entregable final que se construye para el cliente
        * Backlog:       Acumulacion de caracteristicas y tareas que se requieren para que
                         el producto pueda ser de valor para el cliente
                         
        Eventos en un Sprint:
        * Planeacion:    Define el objetivo del sprint, seleccionando cantidad de historias a
                         realizar, por cada una se detalla sus tareas y estimacion de esfuerzo
        * Desarrollo:    Etapa donde los elementos del equipo trabajan para desarrollar las
                         historias
        * Sesion Diaria: Sesion rapida del equipo de desarrollo donde se hace un analisis corto
                         del estado de la historia en desarrollo
        * Revision:      El equipo presenta las historias que se aceptaron en la planeacion
        * Retrospectiva: Sesion de retroalimentacion para identificar lo que se hizo bien, las
                         areas de oportunidad y lo que se necesita hacer para mejorar
        * Refinamiento:  Sesion para detallar nuevas historias para los proximos sprints
          
     
**** Roles
    
***** Principales 
      Product Owner:
      * Establece los objetivos del proyecto
      * Define las historias, requerimientos y criterios de aceptacion del producto
      * Representa los intereses de la organizacion y clientes
      * Interlocutor unico ante el equipo
      
      Scrum Master:
      * Apoya el marco de trabajo y eventos
      * Fortalece la comunicacion entre el equipo
      * Mantiene al equipo enfocado
      * Elimina impedimento para el progreso del equipo de desarrollo
      
      Dev Team:
      * Equipo auto organizado y multifuncional
      * Tiempo completo al proyecto
      * Desarrollan el producto
      * Multidisciplinario
      
***** Otros
      Stakeholders: Persona o organizacion que provee recursos y apoyo al proyecto
      
      Chief Product Owner: Responsable de coordinar multiples product owners
      
      Cliente: Persona o organizacion que adquiere el producto o servicio
      
      Usuario: Individuo u organizacion que usa el producto o servicio
      
*** Design Thinking
    Metodo para generar ideas que se centra en entender y dar solucion a las necesidades
    del cliente
   
**** Fases

***** Empatia
      Capacidad de identificarse cn alguien y compartir sus sentimientos

      En esencia, pensar como si fueras el cliente para saber las mejores maneras
      para ayudarlos

***** Definicion
      Se recaban requerimientos en esta fase

***** Ideacion
      Se generan ideas para satisfacer las necesidades del cliente

      - No se descartan ideas
      - Despues se hace una evaluacion y se seleccionan las mejores

***** Prototipo
      Se construyen prototipos de las ideas seleccionadas y permite visualizar posibles
      soluciones

***** Pruebas
      Probamos el prototipo con segmentos de clientes a los que deseamos proponer
      nuestra solucion
      
** Ingenieria de software 
  
*** 5 P del desarrollo de software
    - Proceso
    - Planes
    - Proyecto
    - Personas
      
     construyen
        ----> 
        
    - Producto

*** Proceso de desarrollo de software
   | # | Fase         | Consiste en                                  |
   |---+--------------+----------------------------------------------|
   | 0 | Necesidades  | Obtener requerimientos                       |
   | 1 | Analisis     | Req. Funcionales y No Funcionales/Prototipos |
   | 2 | DiseÃ±o       | Dis. de arquitectura/bajo nivel              |
   | 3 | Construccion | Codificacion/Pruebas                         |
   | 4 | Despliegue   | Instalacion/Parametrizacion/Entrenamiento    |
   
   
*** DiseÃ±o
 
**** Patrones 
***** Cliente-servidor?
Se conectan los clientes a un servidor
***** Modelo-Vista-Controlador
El usuario manda una peticion al controlador, este hace comunicaicon con el modelo y se lo regresa al usuario en forma de vista.

*** Actividades

  
**** <2021-04-09 Fri 08:35> 

***** Â¿Que es arquitectura?
     Segun la RAE, arquitectura es el diseÃ±o de una construccion, asi como la estructura logica de los componentes de una computadora o programa.
   
***** Â¿Que es un diagrama/dibujo arquitectonico y para que sirve?
      Un diagrama arquitectonico es una representacion visual de un diseÃ±o y sus componentes, sirviendo para darse una idea general del diseÃ±o.

*** Testing
El testing de software es:
- Correr el programa para validar que no haya defectos antes de su entrega

**** Limitantes del testing
- Dificil estimar lo que se tardara en arreglar bugs
- No muy efectivo en terminos de porcentaje (35-50%~ de bugs encontrados por testing)
- Le quitan la elegancia al codigo
- Generan mucho estres
- Es tiempo desperdiciado (no genera valor)
- Es costoso

**** Metodos para diseÃ±o de casos de prueba

***** Particion equivalente
Se parten las entradas en conjuntos que actuan de formas similares

***** Valores limite
Se prueban los limites de los rangos
- Expande la particion equivalente
  
***** Caminos basicos
Se usa cuando existe un grafo

| Reglas                                       |
|----------------------------------------------|
| Arcos solo tienen una direccion              |
| Arcos siempre tienen un nodo en cada extremo |
| Solo un inicio y un final                    |

Se usa para probar todos los caminos posibles con la minima cantidad de pasos

| Dibujar grafo |

 Calcular cantidad de caminos basicos             
 Se cuenta la cantidad de nodos y arcos y se sacan los caminos basicos con la formula: x = n - a +2 
| Encontrar caminos basicos                       |
|                                                 |
12345
1232345
125
12625
126725
1269625
1268625
| Hacer un caso de prueba para cada camino basico |

** Reto
*** Reunion CEMEX
    Objetivo:
    - Desarrollar una prueba de concepto de gamificacion a traves
    de un simulador que utilice datos reales sanitizados.

    Descripcion del proyecto:
    - Generar un modelo gamificado que represente las principales actividades
      que contribuyen a la velocidad y calidad de los equipos de desarrollo
    - Simular la ejecucion de los diferentes juegos diseÃ±ados utilizando la
      linea de tiempo de los datos provistos
    - Evaluar el beneficio de implementar el modelo en un ambiente productivo
 
****  KPI
     - Key performance indicator
     - Utilizado para sintetizar informacion sobre eficacia y productividad

     Lead Indicators
     - Tratan de predecir el futuro
     
***** Porque gamificacion 
     Ayuda a mejorar los siguientes aspectos:
     - Alta complejidad en terminos de tareas y sus dependencias
     - A pesar de tener tableros, es relativamente facil perder visibilidad
       de lo importante por parte de los miembros del equipo
     - Baja motivacion del equipo a seguir politicas y lineamientos, esto
       trae como consecuencias fallas en la calidad y por ende en la velocidad
       
       
** Actividades
*** DONE Act 2.1.1
    CLOSED: [2021-04-05 Mon 08:14]
