* Multi agent systems w/ computer graphics

** Class content
   
*** Agent
    Actor a system capable of making choices independently and interact with other agents within a system

    - Communicate using ACL
    - Try to fulfill their own interests
    - Should be reactive and proactive
    - Can collaborate if they think it will help them fulfill their objectives
    - Choices work similarly to a state machine

    Used in many fields:
    - Economic sciences
    - Game theory
    - Logic
    - Ecology
    - Social sciences
    
*** Why multi agent systems?
    - Ubiquity
    - Interconection
    - Intelligence
    - Delegation
    - Human orientation
   
*** How are agent different from objects?
    - Agents are more autonomous than objects
    - Agents are intelligent
    - Agents are not passive, they are more proactive

      * Objects do stuff for free
      * Agents do stuff because they want to
      * Agents do stuff for money
     
        
*** Environment
    Defined as a finite set of discrete and instantaneous states

    Example for a car:
    - E = {moving, stopped, off, broke down}
   
*** Purely reactive agents
    Care only about present conditions

    Ex. A thermostat

    
*** Agent architectures
    - Deductive reasoning
    - 
    
      
*** Deductive reasoning agents
    \phi is a theory (rule set)
    \delta is a logical database that contains the world state
    Ac is the agent's action set

   $$\phi = { Day(monday) ^ Time(9am) -> Do(goToAgentsLecture),$$
    $$Day(saturday) -> !Do(goToAgentsLecture),$$
    $$Day(friday) ^ Time(7pm) -> Do(goToDinner) }$$
    $$\delta = { Day(friday),$$
    $$Time(7pm) }$$
    $$Ac = { goToAgentsLecture, goToDinner }$$
    $$\delta | -\phi = goToDinner$$
    
*** Practical reasoning agent
    Human reasoning consists of two main activities:
    1. Deliberation to decide what is to be achieved
    2. Reasoning of means and ends to decide how to achieve these things

    This type of agents tracks how successful attempts to do things are

*** Vector
    i = (1,0,0)
    j = (0,1,0)
    k = (0,0,1)
    v = vxi,vyj,vzk
    un vector son vectores unitarios (i, j, k) con escalares

    Dot product to get angle between vectors
    Cross product to get direction from vectors

    
*** Illumination types
   
**** Point
     
**** Directional light

*** Variables (in spanish)
   | 𝑙  | Luz entrante (vector unitario).           |
   | 𝑟  | Luz reflejada (vector unitario).          |
   | 𝑛  | Normal a la superficie (vector unitario). |
   | 𝑣  | Dirección de la cámara (vector unitario). |
   | I  | Intensidad de la luz (escalar).           |
   | 𝐼𝑎 | Intensidad ambiental (escalar).           |
   | 𝐼𝑑 | Intensidad difusa (escalar).              |
   | 𝐼𝑠 | Intensidad especular (escalar).           |
   | 𝐼𝑙 | Intensidad de la luz (escalar).           |
   | 𝑘𝑎 | Constante ambiental (escalar).            |
   | 𝑘𝑑 | Constante difusa (escalar).               |
   | 𝑘𝑠 | Constante especular (escalar).            |
   | 𝜃  | Ángulo de incidencia (escalar).           |
   | 𝜙  | Ángulo entre 𝑣 y 𝑟.                       |
   | 𝛼  | Coeficiente especular.                    |
     
*** Basic illumination model
    I = 𝐼𝑎 + 𝐼𝑑 + 𝐼𝑠
    
*** Ambient light
    Ia = 𝑘𝑎𝐼𝑙

*** Diffuse light
    𝑰𝒅 =𝒌𝒅𝑰𝒍(𝒏∙𝒍)

    
*** Specular light
    𝐼𝑠 = 𝑘𝑠𝐼𝑠(𝑣∙𝑟)^𝛼 

  
*** Phong's model
    All types of light are summed up for each pixel in red, green and blue

    
*** Shading
    Used to determine color

*** Flat shading
    The shade is constant and determined for each face in the object

    
*** Interpolated shading
    Shades are determined on vertices and interpolated to achieve a smooth surface

*** Texture mapping
    Giving simple shapes and models color by mapping the model

*** Ambient mapping
    Reflections can be emulated by mapping textures to shiny surfaces

*** Connecting the agent system with unity
    Ngrok can be used as a tunnel to send data from python (Ngrok) to Unity in
    order to display the information

*** Displaying agents in Unity
    - Create AgentInfo class (can be many different agents) and add [System.serializable]
      before class creation
    - Create AgentController which creates the agents from the data it receives
      - Set prefabs for each agent to public to change from Ynity
